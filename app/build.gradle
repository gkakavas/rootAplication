plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id "com.palantir.docker" version "0.35.0"
}



group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}



docker {
	name "spring_boot_app"
	dockerfile file('Dockerfile')
	files bootJar.getArchiveFile()
	buildArgs(['JAR_FILE': "${bootJar.getArchiveFileName().get()}"])
}

jar{
	archiveClassifier=''
	enabled = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-logging:3.1.1'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql:42.6.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	testImplementation 'org.instancio:instancio-junit:3.1.0'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.docker.dependsOn('build')

tasks.register("prepareKotlinBuildScriptModel"){}





